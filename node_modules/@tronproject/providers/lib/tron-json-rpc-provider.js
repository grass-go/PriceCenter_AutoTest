"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpcProvider = void 0;
var logger_1 = require("@tronproject/logger");
var _version_1 = require("./_version");
var web_1 = require("@tronproject/web");
var url_json_rpc_provider_1 = require("./url-json-rpc-provider");
var properties_1 = require("@tronproject/properties");
var address_1 = require("@tronproject/address");
var bignumber_1 = require("@tronproject/bignumber");
var strings_1 = require("@tronproject/strings");
var properties_2 = require("@tronproject/properties");
var logger = new logger_1.Logger(_version_1.version);
var JsonRpcProvider = /** @class */ (function (_super) {
    __extends(JsonRpcProvider, _super);
    function JsonRpcProvider(url, options, network) {
        if (options === void 0) { options = { strict: true }; }
        var _this = this;
        var originUrl = typeof (url) === 'object' ? properties_2.shallowCopy(url) : url;
        if (options && options.strict) {
            if (typeof (url) === 'object') {
                url.url = url.url + '/jsonrpc';
                url.fullHost = url.fullHost ? url.fullHost : url.url;
            }
            else {
                url = url + '/jsonrpc';
            }
        }
        _this = _super.call(this, url, network) || this;
        properties_1.defineReadOnly(_this, "_fullNode", originUrl);
        properties_1.defineReadOnly(_this, "_isTron", true);
        return _this;
    }
    JsonRpcProvider.prototype.tronSend = function (method, request) {
        var _this = this;
        var connection = typeof (this._fullNode) === 'object' ? __assign(__assign({}, this._fullNode), { url: this._fullNode.fullHost + method }) : this._fullNode + method;
        var result = web_1.fetchJson(connection, JSON.stringify(request)).then(function (result) {
            _this.emit("debug", {
                action: "response",
                request: request,
                response: result,
                provider: _this
            });
            return result;
        }, function (error) {
            _this.emit("debug", {
                action: "response",
                error: error,
                request: request,
                provider: _this
            });
            throw error;
        });
        return result;
    };
    JsonRpcProvider.prototype.paramsNotValid = function (params) {
        var isNotNullOrUndefined = function (val) {
            return val !== null && typeof val !== 'undefined';
        };
        var isArray = function (array) {
            return Array.isArray(array);
        };
        var isBoolean = function (bool) {
            return typeof bool === 'boolean';
        };
        var isString = function (string) {
            return typeof string === 'string';
        };
        var isHex = function (string) {
            if (string === '0x')
                return true;
            return (typeof string === 'string'
                && !isNaN(parseInt(string, 16))
                && /^(0x|)[a-fA-F0-9]+$/.test(string));
        };
        var isInteger = function (number) {
            if (number === null)
                return false;
            return Number.isInteger(Number(number));
        };
        var throwInvalid = function (param) {
            logger.throwError("Invalid " + param.name + (param.type === 'address' ? ' address' : '') + " provided", logger_1.Logger.errors.INVALID_ARGUMENT);
        };
        var no = false;
        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
            var param = params_1[_i];
            var value = param.value, type = param.type, gt = param.gt, lt = param.lt, gte = param.gte, lte = param.lte, optional = param.optional;
            if (optional && !isNotNullOrUndefined(value))
                continue;
            switch (type) {
                case 'address':
                    if (!address_1.isAddress(value)) {
                        no = true;
                    }
                    break;
                case 'integer':
                    if (!isInteger(value) ||
                        (typeof gt === 'number' && value <= param.gt) ||
                        (typeof lt === 'number' && value >= param.lt) ||
                        (typeof gte === 'number' && value < param.gte) ||
                        (typeof lte === 'number' && value > param.lte)) {
                        no = true;
                    }
                    break;
                case 'hex':
                    if (!isHex(value)) {
                        no = true;
                    }
                    break;
                case 'array':
                    if (!isArray(value)) {
                        no = true;
                    }
                    break;
                case 'not-empty-string':
                    if (!isString(value) || !value.length) {
                        no = true;
                    }
                    break;
                case 'boolean':
                    if (!isBoolean(value)) {
                        no = true;
                    }
                    break;
                case 'string':
                    if (!isString(value) ||
                        (typeof gt === 'number' && value.length <= param.gt) ||
                        (typeof lt === 'number' && value.length >= param.lt) ||
                        (typeof gte === 'number' && value.length < param.gte) ||
                        (typeof lte === 'number' && value.length > param.lte)) {
                        no = true;
                    }
                    break;
            }
            if (no) {
                throwInvalid(param);
                return true;
            }
        }
        return false;
    };
    JsonRpcProvider.prototype._getMethod = function (transaction) {
        return __awaiter(this, void 0, void 0, function () {
            var code;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!transaction.to) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getCode(transaction.to)];
                    case 1:
                        code = _a.sent();
                        if (code != '0x') {
                            return [2 /*return*/, 'triggerSmartContract'];
                        }
                        else {
                            return [2 /*return*/, 'createTransaction'];
                        }
                        return [3 /*break*/, 3];
                    case 2: return [2 /*return*/, 'deployContract'];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    JsonRpcProvider.prototype.buildTronTransaction = function (transaction) {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function () {
            var method, trans, request, result, error_1;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (this.paramsNotValid([
                            {
                                name: 'from',
                                type: 'address',
                                value: transaction.from
                            },
                            {
                                name: 'to',
                                type: 'address',
                                value: transaction.to,
                                optional: true
                            },
                            {
                                name: 'gas',
                                type: 'integer',
                                value: transaction.gas,
                                gte: 0,
                                optional: true
                            },
                            {
                                name: 'value',
                                type: 'integer',
                                value: transaction.value,
                                gte: 0,
                                optional: true
                            },
                            {
                                name: 'consumeUserResourcePercent',
                                type: 'integer',
                                value: transaction.consumeUserResourcePercent,
                                gte: 0,
                                lte: 100,
                                optional: true
                            },
                            {
                                name: 'originEnergyLimit',
                                type: 'integer',
                                value: transaction.originEnergyLimit,
                                gte: 0,
                                lte: 1e7,
                                optional: true
                            },
                            {
                                name: 'name',
                                type: 'string',
                                value: transaction.name,
                                optional: true
                            },
                            {
                                name: 'tokenId',
                                type: 'integer',
                                value: transaction.tokenId,
                                gt: 1000000,
                                optional: true
                            },
                            {
                                name: 'tokenValue',
                                type: 'integer',
                                value: transaction.tokenValue,
                                gte: 0,
                                optional: true
                            },
                            {
                                name: 'permissionId',
                                type: 'integer',
                                value: transaction.permissionId,
                                gte: 0,
                                optional: true
                            },
                            {
                                name: 'abi',
                                type: 'string',
                                value: transaction.abi,
                                optional: true
                            }
                        ])) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this._getMethod(transaction)];
                    case 1:
                        method = _g.sent();
                        if (method == "deployContract") {
                            trans = {
                                from: transaction.from,
                                data: transaction.data,
                                gas: transaction.gas ? bignumber_1.BigNumber.from(transaction.gas).toHexString() : '0x0',
                                value: transaction.value ? bignumber_1.BigNumber.from(transaction.value).toHexString() : '0x0',
                                consumeUserResourcePercent: (_a = transaction.consumeUserResourcePercent) !== null && _a !== void 0 ? _a : 100,
                                originEnergyLimit: (_b = transaction.originEnergyLimit) !== null && _b !== void 0 ? _b : 100,
                                abi: (_c = transaction.abi) !== null && _c !== void 0 ? _c : '',
                                name: (_d = transaction.name) !== null && _d !== void 0 ? _d : ''
                            };
                            if (transaction.tokenId) {
                                trans.tokenId = transaction.tokenId;
                            }
                            if (transaction.tokenValue) {
                                trans.tokenValue = transaction.tokenValue;
                            }
                        }
                        else if (method == 'triggerSmartContract') {
                            trans = {
                                from: transaction.from,
                                to: (_e = transaction.to) !== null && _e !== void 0 ? _e : '',
                                data: transaction.data,
                                value: transaction.value ? bignumber_1.BigNumber.from(transaction.value).toHexString() : '0x0',
                                gas: transaction.gas ? bignumber_1.BigNumber.from(transaction.gas).toHexString() : '0x0',
                            };
                            if (transaction.tokenId) {
                                trans.tokenId = transaction.tokenId;
                            }
                            if (transaction.tokenValue) {
                                trans.tokenValue = transaction.tokenValue;
                            }
                        }
                        else if (method == 'createTransaction') {
                            trans = {
                                from: transaction.from,
                                to: (_f = transaction.to) !== null && _f !== void 0 ? _f : '',
                                value: transaction.value ? bignumber_1.BigNumber.from(transaction.value).toHexString() : '0x0',
                            };
                            if (transaction.value) {
                                if (transaction.tokenValue) {
                                    logger.throwError("Can't send TRX and TRC10 in one transaction", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "buildTronTransaction"
                                    });
                                }
                            }
                            else {
                                if (transaction.tokenId) {
                                    trans.tokenId = transaction.tokenId;
                                }
                                if (transaction.tokenValue) {
                                    trans.tokenValue = transaction.tokenValue;
                                }
                            }
                        }
                        else {
                            logger.throwError("Can't build transaction", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "buildTronTransaction"
                            });
                        }
                        if (transaction.permissionId) {
                            trans.permissionId = transaction.permissionId;
                        }
                        request = {
                            method: "buildTransaction",
                            params: [trans],
                            id: this._nextId++,
                            jsonrpc: "2.0"
                        };
                        _g.label = 2;
                    case 2:
                        _g.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, web_1.fetchJson(this.connection, JSON.stringify(request))];
                    case 3:
                        result = _g.sent();
                        this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: this
                        });
                        return [2 /*return*/, result];
                    case 4:
                        error_1 = _g.sent();
                        this.emit("debug", {
                            action: "response",
                            error: error_1,
                            request: request,
                            provider: this
                        });
                        throw error_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    JsonRpcProvider.prototype.sendTronTransaction = function (transaction) {
        return __awaiter(this, void 0, void 0, function () {
            var tx_1, error_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.tronSend("/wallet/broadcasttransaction", transaction)];
                    case 1:
                        tx_1 = _a.sent();
                        // Check the hash we expect is the same as the hash the server reported
                        if (tx_1 != null && tx_1.code) {
                            logger.throwError("Transaction failed", logger_1.Logger.errors.UNKNOWN_ERROR, { code: tx_1.code, message: strings_1.toUtf8String("0x" + (tx_1.message || '')) });
                        }
                        tx_1.wait = function (confirmations) { return _this.waitForTransaction("0x" + tx_1.txid, confirmations); };
                        return [2 /*return*/, tx_1];
                    case 2:
                        error_2 = _a.sent();
                        throw error_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    JsonRpcProvider.prototype._getAddress = function (addressOrName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, addressOrName];
                    case 1:
                        addressOrName = _a.sent();
                        if (addressOrName == null) {
                            logger.throwError("ENS name not configured", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                            });
                        }
                        else if (address_1.isAddress(addressOrName)) {
                            return [2 /*return*/, address_1.getAddress(addressOrName)];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    return JsonRpcProvider;
}(url_json_rpc_provider_1.StaticJsonRpcProvider));
exports.JsonRpcProvider = JsonRpcProvider;
//# sourceMappingURL=tron-json-rpc-provider.js.map