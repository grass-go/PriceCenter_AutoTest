import { TronTransactionRequest, TronTransactionResponse } from "@tronproject/abstract-provider";
import { ConnectionInfo } from "@tronproject/web";
import { Networkish } from "@tronproject/networks";
import { StaticJsonRpcProvider } from "./url-json-rpc-provider";
export declare type TronTransactionMethods = 'createTransaction' | 'deployContract' | 'triggerSmartContract';
export declare class JsonRpcProvider extends StaticJsonRpcProvider {
    readonly _fullNode: ConnectionInfo | string;
    readonly _isTron: boolean;
    constructor(url: ConnectionInfo | string, options?: any, network?: Networkish);
    tronSend(method: string, request: any): Promise<any>;
    paramsNotValid(params: Array<any>): boolean;
    _getMethod(transaction: any): Promise<TronTransactionMethods>;
    buildTronTransaction(transaction: any): Promise<any>;
    sendTronTransaction(transaction: TronTransactionRequest): Promise<TronTransactionResponse>;
    _getAddress(addressOrName: string | Promise<string>): Promise<string>;
}
//# sourceMappingURL=tron-json-rpc-provider.d.ts.map