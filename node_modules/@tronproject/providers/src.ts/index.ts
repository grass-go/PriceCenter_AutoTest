"use strict";

import {
    Block,
    BlockTag,
    EventType,
    Filter,
    Log,
    Listener,
    Provider,
    TransactionReceipt,
    TransactionRequest,
    TransactionResponse
} from "@tronproject/abstract-provider";

import { getNetwork } from "@tronproject/networks";
import { Network, Networkish } from "@tronproject/networks";

import { BaseProvider, EnsProvider, EnsResolver, Resolver } from "./base-provider";

import { JsonRpcProvider } from "./tron-json-rpc-provider";

import { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from "./formatter";

import { Logger } from "@tronproject/logger";
import { version } from "./_version";
const logger = new Logger(version);

////////////////////////
// Helper Functions

// @ts-ignore
function getDefaultProvider(network?: string, options?: any): JsonRpcProvider {
    if (network == null) {
        logger.throwArgumentError("unsupported URL scheme", "network", network);
    }

    const match = network.match(/^(http)s?:/i);
    if (match) {
        switch (match[1]) {
            case "http":
                return new JsonRpcProvider(network);
            default:
                // throw new Error()
                logger.throwArgumentError("unsupported URL scheme", "network", network);
        }
    }
    logger.throwArgumentError("unsupported URL scheme", "network", network);
}

////////////////////////
// Exports

export {

    // Abstract Providers (or Abstract-ish)
    Provider,
    BaseProvider,

    Resolver,

    ///////////////////////
    // Concreate Providers

    JsonRpcProvider,

    ///////////////////////
    // Functions

    getDefaultProvider,
    getNetwork,
    isCommunityResource,
    isCommunityResourcable,
    showThrottleMessage,


    ///////////////////////
    // Objects

    Formatter,


    ///////////////////////
    // Types

    Block,
    BlockTag,
    EventType,
    Filter,
    Log,
    Listener,
    TransactionReceipt,
    TransactionRequest,
    TransactionResponse,

    Network,
    Networkish,

    EnsProvider,
    EnsResolver,

    CommunityResourcable
};

