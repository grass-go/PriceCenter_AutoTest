
"use strict";

import { Network } from "@tronproject/networks";
import { defineReadOnly } from "@tronproject/properties";

import { Logger } from "@tronproject/logger";
import { version } from "./_version";
const logger = new Logger(version);

import { BaseJsonRpcProvider } from "./json-rpc-provider";

// A StaticJsonRpcProvider is useful when you *know* for certain that
// the backend will never change, as it never calls eth_chainId to
// verify its backend. However, if the backend does change, the effects
// are undefined and may include:
// - inconsistent results
// - locking up the UI
// - block skew warnings
// - wrong results
// If the network is not explicit (i.e. auto-detection is expected), the
// node MUST be running and available to respond to requests BEFORE this
// is instantiated.
export class StaticJsonRpcProvider extends BaseJsonRpcProvider {
    async detectNetwork(): Promise<Network> {
        let network = this.network;
        if (network == null) {
            network = await super.detectNetwork();

            if (!network) {
                logger.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, { });
            }

            // If still not set, set it
            if (this._network == null) {
                // A static network does not support "any"
                defineReadOnly(this, "_network", network);

                this.emit("network", network, null);
            }
        }
        return network;
    }
}
